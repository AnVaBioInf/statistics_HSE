# -*- coding: utf-8 -*-
"""Копия блокнота "Копия блокнота "HW3_statistics_HIV.ipynb""

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k622X35Cdo0HGJHLDXzIxCDcVEuU3Cd6

group by https://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html \\
hist https://chartio.com/learn/charts/histogram-complete-guide/ \\
sns examples https://medium.com/analytics-vidhya/plotting-with-seaborn-part-3-32857ca6fee \\
legend https://matplotlib.org/3.5.1/api/_as_gen/matplotlib.pyplot.legend.html

Источник данных https://www.kaggle.com/mpwolke/cusersmarildownloadstcellcsv

Описание колонок \\
'study_id', \\
'age_at_enrollment' \\ 
'sex' \\
'race_ethnicity' \\
'BMI' - индекс массы тела \\
'smoking_status' \\
'pack_years' \\
'inhalational_drugs' \\
'ivdu' - intravenous drug users \\
'hivrna' \\
'cd4' \\
's_cd14' - plasma soluble CD14  ( \\
'nadir_cd4' \\
'dm' - Dextromethorphan \\
'htn' - Hypertension \\
'anemia' \\
'chronic_heart_disease' \\
'tb' - Tuberculosis \\
'pcp' -  Pneumocystis carinii pneumonia \\
'pneu' - Pneumonia \\
'cd4_cd8_ratio' \\
'ART_use' - Antiretroviral Therapy \\
'post_FEV1' - postoperative Forced expiratory volume \\
'FEV1_percent_pred' - Forced expiratory volume \\
'post_FVC' Post-Bronchodilator Forced Vital Capacity (FVC) \\
'FVC_percent_pred' \\
'dlco_percent_pred' - Исследование способности диффузии газов в легких \\
'emphysema_severity'

Emphysema, or pulmonary emphysema, is a lower respiratory tract disease,[5] characterised by air-filled spaces (pneumatoses) in the lung, that can vary in size and may be very large. The spaces are caused by the breakdown of the walls of the alveoli and they replace the spongy lung parenchyma. This reduces the total alveolar surface available for gas exchange leading to a reduction in oxygen supply for the blood.[6] Emphysema usually affects the middle aged or older population because it takes time to develop with the effects of smoking, and other risk factors. Alpha-1 antitrypsin deficiency is a genetic risk factor that may lead to the condition presenting earlier.[7]

Because emphysema develops earlier in HIV+ patients, the association between HIV infection and emphysema may reflect an increased susceptibility to tobacco damage. The increased susceptibility may be due to HIV decreasing the lung’s ability to cope with the injury by cigarette smoking.

Plasma sCD14 is a biomarker associated with impaired neurocognitive testing in attention and learning domains in HIV-infected individuals with advanced disease, suggesting involvement of cortical and limbic pathways by inflammatory processes in the cART era. Plasma sCD14 is a potential biomarker to monitor HAND progression and therapeutic responses.

cd4_cd8_ratio The CD4+/CD8+ ratio is the ratio of T helper cells (with the surface marker CD4) to cytotoxic T cells (with the surface marker CD8). Both CD4+ and CD8+ T cells contain several subsets.[1]

The CD4+/CD8+ ratio in the peripheral blood of healthy adults and mice is about 2:1, and an altered ratio can indicate diseases relating to immunodeficiency or autoimmunity.[2] An inverted CD4+/CD8+ ratio (namely, less than 1/1) indicates an impaired immune system.[3][4][5]

Obesity and dysregulated lipid metabolism in the liver leads to loss of CD4+, but not CD8+ cells, contributing to the induction of liver cancer.[6] Regulatory CD4+ cells decline with expanding visceral fat, whereas CD8+ T-cells increase.[7]
https://en.wikipedia.org/wiki/CD4%2B/CD8%2B_ratio

Description

Цель -

## Загрузка библиотек и датасета
"""

# importing libraries
import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns
from math import sqrt

df = pd.read_csv('TCell.csv', sep=';')

"""## Checking the data"""

df.head(10)

print(df.shape)

col = df.columns
col

df.info()

df.isnull().sum()

"""## Data cleaning

Заменим разделитель в числах с запятой на точку
"""

df['pack_years'] = pd.to_numeric(df['pack_years'].str.replace(',', '.'))
df['BMI'] = pd.to_numeric(df['BMI'].str.replace(',', '.'))
df['s_cd14'] = pd.to_numeric(df['s_cd14'].str.replace(',', '.'))
df['post_FEV1'] = pd.to_numeric(df['post_FEV1'].str.replace(',', '.'))
df['FEV1_percent_pred'] = pd.to_numeric(df['FEV1_percent_pred'].str.replace(',', '.'))
df['post_FVC'] = pd.to_numeric(df['post_FVC'].str.replace(',', '.'))
df['FVC_percent_pred'] = pd.to_numeric(df['FVC_percent_pred'].str.replace(',', '.'))
df['dlco_percent_pred'] = pd.to_numeric(df['dlco_percent_pred'].str.replace(',', '.'))
df['cd4_cd8_ratio'] = pd.to_numeric(df['cd4_cd8_ratio'].str.replace(',', '.'))
df['ART_use'] = df['ART_use'].replace([1,2], [0,1]).astype('bool')

# здесь не было NaN
#df['sex'] = df['sex'].astype('bool')
#df['inhalational_drugs'] = df['inhalational_drugs'].astype('bool')
#df['ivdu'] = df['ivdu'].astype('bool')
#df['dm'] = df['dm'].astype('bool')
#df['htn'] = df['htn'].astype('bool')
#df['chronic_heart_disease'] = df['chronic_heart_disease'].astype('bool')
#df['tb'] = df['tb'].astype('bool')
#df['pcp'] = df['pcp'].astype('bool')
#df['pneu'] = df['pneu'].astype('bool')
#df['anemia'] = df['anemia'].astype('bool')

#df['emphysema_severity'] = df['emphysema_severity'].astype('int')

df = df[((df['tb']!=1) & (df['pcp']!=1) & (df['pneu']!=1))]

"""This allowes to leave NaN"""

df['emphysema_severity'] = df['emphysema_severity'].map({0.0: '0%', 1.0: '1-10%', 2.0:'10-25%', 3.0:'25-50%', 4.0:'50-75%', 5.0:'>75%'})
df['pneu'] = df['chronic_heart_disease'].map({1: 'Есть', 0: 'Нет'})

df['smoking_status'] = df['smoking_status'].map({'current smoker': 'Курит', 'former smoker': 'Курил', 'never smoker':'Никогда не курил'})
df['inhalational_drugs'] = df['inhalational_drugs'].map({1: 'Проводится', 0: 'Не проводится'})
df['ivdu'] = df['ivdu'].map({1: 'Проводится', 0: 'Не проводится'})
df['dm'] = df['dm'].map({1: 'Проводится', 0: 'Не проводится'})
df['ART_use'] = df['ART_use'].map({True: 'Проводится', False: 'Не проводится'})
df['anemia'] = df['anemia'].map({1: 'Есть', 0: 'Нет'})
df['chronic_heart_disease'] = df['chronic_heart_disease'].map({1: 'Есть', 0: 'Нет'})

df

df_cat = df.copy()
df_cat['pack_years'] = df_cat['pack_years'].map(lambda x:'Немоного (<20)' if x<20 else ('Умеренно' if (x>=20 and x<40) else (np.nan if x!=x else 'Много (>40)')))
df_cat['BMI'] = df_cat['BMI'].map(lambda x:'Дистрофия' if x<18.5 else ('Норма' if (x>=18.5 and x<24.9) else (np.nan if x!=x else 'Ожирение')))
df_cat['emphysema_severity'] = df_cat['emphysema_severity'].map(lambda x:'Нет' if x=='0%' else (np.nan if x!=x else 'Есть'))
df_cat['cd4'] = df_cat['cd4'].apply(lambda x:'Низкий' if x<500 else ('Нормальный' if (x>=500 and x<1400) else (np.nan if x!=x else 'Высокий')))
df_cat['cd4_cd8_ratio'] = df_cat['cd4_cd8_ratio'].apply(lambda x:'Низкий' if x<0.4 else ('Нормальный' if (x>=0.4 and x<1.0) else (np.nan if x!=x else 'Высокий')))
df_cat['s_cd14'] = df_cat['s_cd14'].apply(lambda x:'Низкий' if x<200 else ('Нормальный' if (x>=200 and x<1500) else (np.nan if x!=x else 'Высокий')))
df_cat['nadir_cd4'] = df_cat['nadir_cd4'].apply(lambda x:'Низкий' if x<190 else ('Нормальный' if (x>=190 and x<400) else (np.nan if x!=x else 'Высокий')))

df_cat

df.shape

df.info()

df.isnull().sum()

lung_dis = ['tb','pcp','pneu','emphysema_severity']
other_dis = ['htn', 'anemia', 'chronic_heart_disease']
immune_lvl = ['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio', 'hivrna']
medicine = ['ART_use', 'inhalational_drugs', 'ivdu', 'dm']
smoking = ['smoking_status', 'pack_years']
spir_data = ['post_FEV1', 'FEV1_percent_pred', 'post_FVC', 'FVC_percent_pred', 'dlco_percent_pred']
general_inf = ['sex', 'race_ethnicity', 'BMI']

# Словарь
dic_names = {'BMI':'Индекс массы тела',
             'hivrna':'РНК ВИЧ',

             'cd4':'CD4',
             's_cd14':'sCD14',
             'nadir_cd4':'надир CD4',
             'cd4_cd8_ratio':'CD4/CD8',

             'age_at_enrollment':'Возраст вступления в программу',
         
             'inhalational_drugs':'Инголяционные лекарства',
             'ivdu':'Внутривенные лекарства',
             'dm':'Декстрометорфан',
             
             'htn':'Гипертония',
             'anemia':'Анемия',
             'chronic_heart_disease':'Хронические заболевания сердца',
             
             'tb':'Туберкулез',
             'pcp':'Пневмоцистная пневмония',
             'pneu':'Бактериальная пневмония',
             'emphysema_severity':'Стадия эмфиземы',

             'post_FEV1':'ОФВ1 после приема бронхолитика',
             'FEV1_percent_pred':'Прогнозируемое значение ОФВ1, %',
             'post_FVC':'ФЖЕЛ после приема бронхолитика',
             'FVC_percent_pred':'Прогнозируемое значение ФЖЕЛ, %',
             'dlco_percent_pred':'Прогнозируемое значение DLCO, %',

             'smoking_status':'Статус курильщика',    
             'pack_years':'Количество выкуривыемых пачек в год',

             'ART_use':'Антиретровирусная терапия',

             'sex':'пол',
             'race_ethnicity':'Рассовая пренадлежность',

             'emphysema_severity_bool':'Эмфизема'
}
# расшифровки аббревиатур https://www.medtran.ru/rus/terms/glossary/spirometryterms_eng.htm

"""## Статистика

### Эмфизема

##### Распределение больных эмфиземой по выборке
"""

df_gr_emph = df.copy()
df_gr_emph['emphysema_severity'] = df_gr_emph['emphysema_severity'].apply(lambda x:'Нет' if x=='0%' else 'Есть')
x_names = ['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio', 'hivrna', 'BMI', 'pack_years']

fig = plt.figure(figsize=(5, 5*2))
ax1 = fig.add_subplot(211)
plot1 = (df.groupby('emphysema_severity')
    .size()
    .rename('Число пациентов')
    .reset_index()
    .pipe((sns.barplot,'data'), x='emphysema_severity', y='Число пациентов', palette='Greys_d'))
ax1.set_xlabel('Поражение легких эмфиземой', fontsize=12)
ax1.set_ylabel('Число пациентов',fontsize=12)
ax1.set_title('Представленность пациентов в выборке',fontsize=16, pad=15)
for bar in plot1.patches:
    plot1.annotate('{}'.format(round(bar.get_height())),
                    (bar.get_x() + bar.get_width() / 2,
                      bar.get_height()), ha='center', va='center',
                    size=10, xytext=(0, 8),
                    textcoords='offset points') 
                   
ax2 = fig.add_subplot(212)
plot2 = (df_cat.groupby('emphysema_severity')
    .size()
    .rename('Число пациентов')
    .reset_index()
    .pipe((sns.barplot,'data'), x='emphysema_severity', y='Число пациентов', order=['Нет', 'Есть'], palette='Greys_d'))
ax2.set_xlabel('Поражение легких эмфиземой', fontsize=12)
ax2.set_ylabel('Число пациентов',fontsize=12)
for bar in plot2.patches:
    plot2.annotate('{}'.format(round(bar.get_height())),
                    (bar.get_x() + bar.get_width() / 2,
                      bar.get_height()), ha='center', va='center',
                    size=10, xytext=(0, 8),
                    textcoords='offset points') 

sns.despine()

df_gr_emph[x_names].describe().T

em_no = df_gr_emph[df_gr_emph['emphysema_severity']=='Нет']
em_yes = df_gr_emph[df_gr_emph['emphysema_severity']=='Есть']

em_no[x_names].describe()

em_yes[x_names].describe()

em_no[x_names].median()

em_yes[x_names].median()

"""Доверительный интервал"""

import numpy as np
import scipy.stats

data = df_gr_emph[(df_gr_emph['BMI']==df_gr_emph['BMI'])]
data = data[data['emphysema_severity']=='Нет']['BMI']

def mean_confidence_interval(data, confidence=0.95):
    a = 1.0 * np.array(data)
    print(a)
    n = len(a)
    m, se = np.mean(a), scipy.stats.sem(a)
    h = se * scipy.stats.t.ppf((1 + confidence) / 2., n-1)
    return m, m-h, m+h

mean_confidence_interval(data=data)

x_names = ['pack_years']

fig = plt.figure(figsize=(5*2.3, 5*3))
for i,x in enumerate(x_names):
  ax = fig.add_subplot(4, 2, i+1)
  hist = sns.histplot(data=df_gr_emph, x=x, bins=round(len(df[x])**0.5), color='#808080')
  ax.set_xlabel(dic_names[x], fontsize=14)
  ax.set_ylabel('Процент пациентов, %', fontsize=14)

#ax = fig.add_subplot(3, 4, 7)

#fig.text(0.08, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)
plt.subplots_adjust(wspace=0.08, hspace=0.3)
sns.despine()

x_names = ['BMI']

fig = plt.figure(figsize=(5*2.3, 5*3))
for i,x in enumerate(x_names):
  ax = fig.add_subplot(4, 2, i+1)
  hist = sns.histplot(data=df_gr_emph, x=x, bins=round(len(df[x])**0.5), color='#808080')
  ax.set_xlabel(dic_names[x], fontsize=14)
  ax.set_ylabel('Процент пациентов, %', fontsize=14)

#ax = fig.add_subplot(3, 4, 7)

#fig.text(0.08, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)
plt.subplots_adjust(wspace=0.08, hspace=0.3)
sns.despine()

x_names = ['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio']

fig = plt.figure(figsize=(5*2.3, 6))
for i,x in enumerate(x_names):
  ax = fig.add_subplot(2, 2, i+1)
  hist = sns.histplot(data=df_gr_emph, x=x, bins=round(len(df[x])**0.5), color='#808080')
  ax.set_xlabel(dic_names[x], fontsize=14)
  ax.set_ylabel('', fontsize=14)

#ax = fig.add_subplot(3, 4, 7)

fig.text(0.08, 0.5, 'Число пациентов', ha='center', va='center', rotation='vertical',fontsize=16)
plt.subplots_adjust(wspace=0.08, hspace=0.3)
sns.despine()

df_gr_emph[df_gr_emph['hivrna']<50]['hivrna'].count()  # вирус подавлен

df_gr_emph[df_gr_emph['hivrna']>50]['hivrna'].count() # вирус активен

x_names = ['hivrna']

rna_cat = df_gr_emph[df_gr_emph['hivrna']<75] # 75- детектируемый порог

fig = plt.figure(figsize=(5*2.3, 5*3))
for i,x in enumerate(x_names):
  ax = fig.add_subplot(4, 2, i+1)
  hist = sns.histplot(data=rna_cat, x=x, bins=round(len(df[x])**0.5), color='#808080')
  ax.set_xlabel(dic_names[x], fontsize=14)
  ax.set_ylabel('Процент пациентов, %', fontsize=14)
#  ax.set_xlim([0,5000])
#ax = fig.add_subplot(3, 4, 7)

#fig.text(0.08, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)
plt.subplots_adjust(wspace=0.08, hspace=0.3)
sns.despine()

x_names = ['hivrna']

rna_cat = df_gr_emph[df_gr_emph['hivrna']>50] # 75- детектируемый порог

fig = plt.figure(figsize=(5*2.3, 5*3))
for i,x in enumerate(x_names):
  ax = fig.add_subplot(4, 2, i+1)
  hist = sns.histplot(data=rna_cat, x=x, bins=round(len(df[x])**0.5), color='#808080')
  ax.set_xlabel(dic_names[x], fontsize=14)
  ax.set_ylabel('Число пациентов', fontsize=14)
#  ax.set_xlim([50,5000])
#ax = fig.add_subplot(3, 4, 7)

#fig.text(0.08, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)
plt.subplots_adjust(wspace=0.08, hspace=0.3)
sns.despine()

df[['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio', 'hivrna', 'BMI', 'pack_years']].skew()

# Commented out IPython magic to ensure Python compatibility.
df_plt_row1 = df.copy()
df_plt_row1['emphysema_severity'] = df_plt_row1['emphysema_severity'].apply(lambda x:'Нет' if x=='0%' else 'Есть')

var=['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio', 'hivrna', 'BMI', 'pack_years']

# %config InlineBackend.figure_format = 'png'

pp = sns.pairplot(df_plt_row1,
             vars=var, kind='reg', hue='emphysema_severity',
             dropna=True, palette='Set1')#, corner=True)

"""Spearman correlation"""

corr_matrix = df[['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio', 'hivrna', 'BMI', 'pack_years']].corr('spearman')
corr_matrix

import seaborn as sns

plt.figure(figsize=(10,10))
sns.heatmap(corr_matrix,cmap='YlGnBu',annot=True);

"""#### Лекарства"""

y = 'emphysema_severity'
x_names = ['inhalational_drugs', 'ivdu', 'dm', 'ART_use']

order_bar = [['0%','1-10%','10-25%','25-50%', '50-75%'], ['Нет', 'Есть']]
order_hue = ['Не проводится', 'Проводится']

df_=[df, df_cat]

fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(7*4, 5*2), squeeze=False) #, sharex=True, sharey=True

#gs = fig.add_gridspec(2, 3)

# histogram
for j in range(len(df_)):
  #hist
  for i,x in  enumerate(x_names):
      #numb of pat
    #  df_n = df_cat_rus.groupby(['pneu',x])['pneu'].size().rename('Number').reset_index().sort_values(['Number'],ascending=False).sort_values('pneu')
    #  df_n = list(df_n['Number'])

    hist = (df_[j].groupby([y])[x]
        .value_counts(normalize=True) #normalising
        .mul(100) #percent
        .rename('percent')
        .reset_index()
        .pipe((sns.barplot,'data'), x=y,y='percent',hue=x, ax=axes[j,i], palette='Greys_d', order=order_bar[j], hue_order=order_hue)) 

    # graph titles
    axes[0, i].set_title(dic_names[x], fontsize=14, pad=20)

    #axes lables
    axes[j, i].set_xlabel('', fontsize=14) #hist
    axes[j, i].set_ylabel('', fontsize=14) #hist

    # axes span
    axes[j, i].set_ylim(0,100)
    # hist.axis('off')
      
    #legend
    hist.legend_.remove() #remove the legend
    #  handles, labels = axes[...].get_legend_handles_labels()

    # annotation (adding lables above the bars)
    for bar in hist.patches:
      hist.annotate('{}%'.format(bar.get_height().round(1)),
                    (bar.get_x() + bar.get_width() / 2,
                      bar.get_height()), ha='center', va='center',
                    size=10, xytext=(0, 8),
                    textcoords='offset points') 
#legend
axes[1,3].legend(title='Терапия', loc='upper right') #frameon=False

  # ticks lables
#    hist.set_xticklabels(ticklables[j], size=12) 
#    box.set_xticklabels(ticklables, size=12) 
#    plt.tick_params(labelcolor='none', which='both', top=False, bottom=False, left=False, right=False)

  # leave only outer titles
#  for ax in fig.get_axes():
#      ax.label_outer()


#legend outside the graph only
#  hist.legend_.remove() #remove the legend
#handles, labels = axes[0,0].get_legend_handles_labels()
#fig.legend(handles, ['Не проводится', 'Проводится'], loc=[0.91,0.5], title='Терапия') #create new one
#handles, labels = axes[0,0].get_legend_handles_labels()
#fig.legend(handles, labels, loc=[0.9,0.25], title='Уровень') #create new one

# graph lables
fig.suptitle('Лечебная терапия и эмфизема легких у HIV(+) пациентов',fontsize=18, y=0.96)
fig.text(0.5, 0.08, 'Поражение легких эмфиземой', ha='center', va='center',fontsize=16 )
fig.text(0.107, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)

#fig.supxlabel('common_x')
#fig.supylabel('common_y')

# distance between graphs
plt.subplots_adjust(wspace=0.05, hspace=0.15)
#
#fig.tight_layout() 
sns.despine()

"""##### Проверка стат.гипотез

Сравнения чисел событий

Критерий хи-квадрат для матрицы n*m
"""

from scipy.stats import chi2_contingency

val = ['inhalational_drugs', 'ivdu', 'dm', 'ART_use']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']
val_st=['Не проводится', 'Проводится']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df[( (df['emphysema_severity']==i) & (df[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))
  print(dic_names[v], p, '\n')

"""Точный тест Фишера таблица 2*2"""

from scipy import stats

val = ['inhalational_drugs', 'ivdu', 'dm', 'ART_use']

for i in val:
  x_hd = [df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Проводится'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Не проводится'))][i].count()]

  x_no_hd = [df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Проводится'))][i].count(),
            df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Не проводится'))][i].count()]
  oddsratio, pvalue = stats.fisher_exact([x_hd,x_no_hd], alternative='two-sided')

  print(dic_names[i], pvalue, '\n')

"""Почитать про эти лекарства, что имели ввиду авторы

#### Сопутствующие заболевания
"""

y = 'emphysema_severity'
x_names = ['chronic_heart_disease','anemia', 'BMI']
#ticklables = [['0%','1-10%','10-25%','25-50%', '50-75%','>75%'], ['Нет', 'Есть']]

df_plt_row1 = df.copy()
df_plt_row1['BMI'] = df['BMI'].apply(lambda x:'Дистрофия' if x<18.5 else ('Норма' if (x>=18.5 and x<24.9) else 'Ожирение'))
df_=[df_plt_row1, df_cat]

order_bar = [['0%','1-10%','10-25%','25-50%', '50-75%'], ['Нет', 'Есть']]
order_hue = [['Нет', 'Есть'], ['Нет', 'Есть'], ['Дистрофия','Норма','Ожирение']]

fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(7*4, 5*2), squeeze=False) #, sharex=True, sharey=True

#gs = fig.add_gridspec(2, 3)

# histogram
for j in range(len(df_)):
  #hist
  for i,x in  enumerate(x_names):
      #numb of pat
    #  df_n = df_cat_rus.groupby(['pneu',x])['pneu'].size().rename('Number').reset_index().sort_values(['Number'],ascending=False).sort_values('pneu')
    #  df_n = list(df_n['Number'])

    hist = (df_[j].groupby([y])[x]
        .value_counts(normalize=True) #normalising
        .mul(100) #percent
        .rename('percent')
        .reset_index()
        .pipe((sns.barplot,'data'), x=y,y='percent',hue=x, ax=axes[j,i], palette='Greys_d', order=order_bar[j], hue_order = order_hue[i])) 

    # graph titles
    axes[0, i].set_title(dic_names[x], fontsize=14, pad=20)

    #axes lables
    axes[j, i].set_xlabel('', fontsize=14) #hist
    axes[j, i].set_ylabel('', fontsize=14) #hist

    # axes span
    axes[j, i].set_ylim(0,100)
    # hist.axis('off')
      
    #legend
    hist.legend_.remove() #remove the legend
    #  handles, labels = axes[...].get_legend_handles_labels()
    axes[0,i].legend(title='', loc='upper left', bbox_to_anchor=(0, 1.08)) #frameon=False

    # annotation (adding lables above the bars)
    for bar in hist.patches:
      hist.annotate('{}%'.format(bar.get_height().round(1)),
                    (bar.get_x() + bar.get_width() / 2,
                      bar.get_height()), ha='center', va='center',
                    size=10, xytext=(0, 8),
                    textcoords='offset points') 

  # box
  box = sns.boxplot(x = y, y = 'BMI', data=df, ax=axes[0, 3], palette='Greys_d') # ничего не сгруппировано
  box = sns.boxplot(x = df_cat[y], y = df['BMI'], ax=axes[1, 3], palette='Greys_d') # сгруппированы стадии эмфиземы

  axes[0, 3].set_xlabel('', fontsize=14) #box
  axes[0, 3].set_ylabel('', fontsize=14) #box
  axes[1, 3].set_xlabel('', fontsize=14) #box
  axes[1, 3].set_ylabel('', fontsize=14) #box

axes[0, 3].set_title('Индекс массы тела', fontsize=14, pad=20)
box.text(-0.65, 57, 'Индекс массы тела',fontsize=16, ha='center', va='center', rotation='vertical')

  # ticks lables
#    hist.set_xticklabels(ticklables[j], size=12) 
#    box.set_xticklabels(ticklables, size=12) 
#    plt.tick_params(labelcolor='none', which='both', top=False, bottom=False, left=False, right=False)

  # leave only outer titles
#  for ax in fig.get_axes():
#      ax.label_outer()


#legend
#handles, labels = axes[0,0].get_legend_handles_labels()
#fig.legend(handles, labels, loc=[0.9,0.25], title='Уровень') #create new one

# graph lables
fig.suptitle('Сопутствующие заболевания у HIV(+) пациентов с диагнозом эмфизема легких',fontsize=18, y=0.96)
fig.text(0.5, 0.08, 'Поражение легких эмфиземой', ha='center', va='center',fontsize=16 )
fig.text(0.107, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)

#fig.supxlabel('common_x')
#fig.supylabel('common_y')

# distance between graphs
plt.subplots_adjust(wspace=0.11, hspace=0.15)
#
#fig.tight_layout() 
sns.despine()

"""#### Средняя и дов.вероятность (индекс массы тела"""



"""##### Проверка стат.гипотез

**Chronical heart desiases, anemia** - категориальные переменные (есть/нет) (Выборки разной длины)

Сравнение чисел событий

Критерий хи-квадрат для таблицы n*m
"""

from scipy.stats import chi2_contingency

val = ['chronic_heart_disease','anemia']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']
val_st=['Нет', 'Есть']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df[( (df['emphysema_severity']==i) & (df[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))
  print(dic_names[v], p, '\n')

"""*Точный тест Фишера* (двусторонний, мы знаем, что другие легочные заболевания могут сопровождаться такими симптомами, но насчет эмфиземы мы не знаем заранее)"""

from scipy import stats

val = ['chronic_heart_disease','anemia']

for i in val:
  x_hd = [df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Есть'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Нет'))][i].count()]

  x_no_hd = [df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Есть'))][i].count(),
            df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Нет'))][i].count()]

  oddsratio, pvalue = stats.fisher_exact([x_hd,x_no_hd], alternative='two-sided')

  print(i)
  print(x_hd,x_no_hd)
  print(pvalue, '\n')

"""**BMI** - количественный параметр (выборки разной длины)

Критерий Краскела-Уоллиса (Kruskal-Wallis H-test)
"""

from scipy.stats import kruskal

val = ['BMI']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']

for i in val:
  x_1 =  df[df['emphysema_severity']=='0%'][i]
  x_2 =  df[df['emphysema_severity']=='1-10%'][i]
  x_3 =  df[df['emphysema_severity']=='10-25%'][i]
  x_4 =  df[df['emphysema_severity']=='25-50%'][i]
  x_5 =  df[df['emphysema_severity']=='50-75%'][i]

  print(kruskal(x_1, x_2, x_3, x_4, x_5, nan_policy='omit'))

"""Переведем количественный параметр в качественный

Критерий хи-квадрат для таблицы n*m
"""

from scipy.stats import chi2_contingency

df_bmi_gr = df.copy()
df_bmi_gr['BMI'] = df_bmi_gr['BMI'].map(lambda x:'Дистрофия' if x<18.5 else ('Норма' if (x>=18.5 and x<24.9) else (np.nan if x!=x else 'Ожирение')))

val = ['BMI']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']
val_st=['Дистрофия','Норма','Ожирение']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df_bmi_gr[( (df_bmi_gr['emphysema_severity']==i) & (df_bmi_gr[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))

  print(dic_names[v], p, '\n')

"""Точный тест Фишера для таблицы 3*2"""

from scipy.stats import chi2_contingency

val = ['BMI']
emf_st = ['Нет', 'Есть']
val_st=['Дистрофия','Норма','Ожирение']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df_cat[( (df_cat['emphysema_severity']==i) & (df_cat[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))

  print(dic_names[v], p, '\n')

"""Сравнить поочередно с поправкой бонферонни

#### Курение
"""

y = 'emphysema_severity'
x_names = ['smoking_status','pack_years']

df_plt_row1 = df.copy()
df_plt_row1['pack_years'] = df_plt_row1['pack_years'].apply(lambda x:'Немоного (<20)' if x<20 else ('Умеренно' if (x>=20 and x<40) else 'Много (>40)'))
df_=[df_plt_row1, df_cat]

order_bar = [['0%','1-10%','10-25%','25-50%', '50-75%'], ['Нет', 'Есть']]
order_hue = {'pack_years':['Немоного (<20)','Умеренно','Много (>40)'],
             'smoking_status':['Никогда не курил','Курил','Курит']}

#order_hue = [['Нет', 'Есть'], ['Нет', 'Есть'], ['Дистрофия','Норма','Ожирение']]

fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(7*3, 5*2), squeeze=False) #, sharex=True, sharey=True

#gs = fig.add_gridspec(2, 3)

# histogram
for j in range(len(df_)):
  #hist
  for i,x in  enumerate(x_names):
      #numb of pat
    #  df_n = df_cat_rus.groupby(['pneu',x])['pneu'].size().rename('Number').reset_index().sort_values(['Number'],ascending=False).sort_values('pneu')
    #  df_n = list(df_n['Number'])

    hist = (df_[j].groupby([y])[x]
        .value_counts(normalize=True) #normalising
        .mul(100) #percent
        .rename('percent')
        .reset_index()
        .pipe((sns.barplot,'data'), x=y,y='percent',hue=x, ax=axes[j,i], palette='Greys_d', order=order_bar[j], hue_order = order_hue[x])) 

    # graph titles
    axes[0, i].set_title(dic_names[x], fontsize=14, pad=20)

    #axes lables
    axes[j, i].set_xlabel('', fontsize=14) #hist
    axes[j, i].set_ylabel('', fontsize=14) #hist

    # axes span
    axes[j, i].set_ylim(0,100)
    # hist.axis('off')
      
    #legend
    hist.legend_.remove() #remove the legend
    #  handles, labels = axes[...].get_legend_handles_labels()
    axes[0,i].legend(title='', loc='upper left')#, bbox_to_anchor=(0, 1.08)) #frameon=False

    # annotation (adding lables above the bars)
    for bar in hist.patches:
      hist.annotate('{}%'.format(bar.get_height().round(1)),
                    (bar.get_x() + bar.get_width() / 2,
                      bar.get_height()), ha='center', va='center',
                    size=10, xytext=(0, 8),
                    textcoords='offset points') 

  # box
  box = sns.boxplot(x = y, y = 'BMI', data=df, ax=axes[0, 2], palette='Greys_d') # ничего не сгруппировано
  box = sns.boxplot(x = df_cat[y], y = df['BMI'], ax=axes[1, 2], palette='Greys_d') # сгруппированы стадии эмфиземы

  axes[0, 2].set_xlabel('', fontsize=14) #box
  axes[0, 2].set_ylabel('', fontsize=14) #box
  axes[1, 2].set_xlabel('', fontsize=14) #box
  axes[1, 2].set_ylabel('', fontsize=14) #box

axes[0, 2].set_title('Количество выкуриваемых пачек в год', fontsize=14, pad=20)
box.text(-0.65, 57, 'Количество выкуриваемых пачек в год, шт',fontsize=16, ha='center', va='center', rotation='vertical')

  # ticks lables
#    hist.set_xticklabels(ticklables[j], size=12) 
#    box.set_xticklabels(ticklables, size=12) 
#    plt.tick_params(labelcolor='none', which='both', top=False, bottom=False, left=False, right=False)

  # leave only outer titles
#  for ax in fig.get_axes():
#      ax.label_outer()


#legend
#handles, labels = axes[0,0].get_legend_handles_labels()
#fig.legend(handles, labels, loc=[0.9,0.25], title='Уровень') #create new one

# graph lables
fig.suptitle('Связь курения и эмфиземы легких у  HIV(+) пациентов',fontsize=18, y=0.96)
fig.text(0.5, 0.08, 'Поражение легких эмфиземой', ha='center', va='center',fontsize=16 )
fig.text(0.103, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)

#fig.supxlabel('common_x')
#fig.supylabel('common_y')

# distance between graphs
plt.subplots_adjust(wspace=0.11, hspace=0.15)
#
#fig.tight_layout() 
sns.despine()

"""##### Проверка стат.гипотез

**Статус курильщика** - качественный параметр

Тест хи-квадрат для матрицы n*m
"""

from scipy.stats import chi2_contingency

val = ['smoking_status']
emf_st = ['Нет', 'Есть']
val_st=['Никогда не курил','Курил','Курит']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df_cat[( (df_cat['emphysema_severity']==i) & (df_cat[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))

  print(dic_names[v], p, '\n')

"""Тест хи-квадрат для матрицы 3*2"""

from scipy.stats import chi2_contingency

val = ['smoking_status']

for i in val:
  x_hd =  np.array([[df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Курит'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Курил'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Никогда не курил'))][i].count()],

         [df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Курит'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Курил'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Никогда не курил'))][i].count()]])

  g, p, dof, expctd = chi2_contingency(x_hd)
  print(p)

"""**Количество выкуриваемых пачек сигарет за год** - количественный параметр

Количество пачек в год-дисперсионный анализ \\
Критерий Краскела Уоллиса (Kruskal-Wallis H-test)
"""

from scipy.stats import kruskal

val = ['pack_years']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']

for i in val:
  x_1 =  df[df['emphysema_severity']=='0%'][i]
  x_2 =  df[df['emphysema_severity']=='1-10%'][i]
  x_3 =  df[df['emphysema_severity']=='10-25%'][i]
  x_4 =  df[df['emphysema_severity']=='25-50%'][i]
  x_5 =  df[df['emphysema_severity']=='50-75%'][i]

  print(kruskal(x_1, x_2, x_3, x_4, x_5, nan_policy='omit'))

"""Переведем количественный параметр в качественный (для сравнения гипотез)

Критерий Уилкоксона
"""



"""Критерий хи квадрат для 3*2 матрицы"""

from scipy.stats import chi2_contingency

val = ['pack_years']

for i in val:
  x_hd =  np.array([[df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Немоного (<20)'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Умеренно'))][i].count(),
          df_cat[((df_cat['emphysema_severity']=='Нет') & (df_cat[i]=='Много (>40)'))][i].count()],
         [df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Немоного (<20)'))][i].count(),
            df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Умеренно'))][i].count(),
            df_cat[((df_cat['emphysema_severity']=='Есть') & (df_cat[i]=='Много (>40)'))][i].count()]])

  g, p, dof, expctd = chi2_contingency(x_hd)
  print(p)

"""#### Иммунитет"""

y = 'emphysema_severity'
x_names = ['cd4','s_cd14', 'nadir_cd4', 'cd4_cd8_ratio']

df_plt_row1 = df.copy()
df_plt_row1['emphysema_severity'] = df_plt_row1['emphysema_severity'].apply(lambda x:'Нет' if x=='0%' else 'Есть')

df_plt_row2 = df.copy()
df_plt_row2['cd4'] = df_plt_row2['cd4'].apply(lambda x:'Низкий' if x<500 else ('Нормальный' if (x>=500 and x<1400) else 'Высокий'))
df_plt_row2['cd4_cd8_ratio'] = df_plt_row2['cd4_cd8_ratio'].apply(lambda x:'Низкий' if x<0.4 else ('Нормальный' if (x>=0.4 and x<1.0) else 'Высокий'))
df_plt_row2['s_cd14'] = df_plt_row2['s_cd14'].apply(lambda x:'Низкий' if x<200 else ('Нормальный' if (x>=200 and x<1500) else 'Высокий'))
df_plt_row2['nadir_cd4'] = df_plt_row2['nadir_cd4'].apply(lambda x:'Низкий' if x<190 else ('Нормальный' if (x>=190 and x<400) else 'Высокий'))

fig, axes = plt.subplots(nrows=4, ncols=4, figsize=(7*4, 5*4), squeeze=False) #, sharex=True, sharey=True
df_1=[df, df_plt_row1]
df_2=[df_plt_row2, df_cat]

order_hue = ['Низкий', 'Нормальный', 'Высокий']
order_bar = [['0%','1-10%','10-25%','25-50%', '50-75%'], ['Нет', 'Есть']]

labels_ = {'cd4':['<500','500-1400', '>1400'], 
           'cd4_cd8_ratio':['<0.4','0.4-1.0', '>1.0'],
           's_cd14':['<200', '200-1500', '>1500'],
           'nadir_cd4':['<190', '190-400', '>400']}

for i,x in  enumerate(x_names): # для колонок
  for k,j in [0,1],[1,3]:  # для этих рядов
    #boxplot
    box = sns.boxplot(x = y, y = x, data=df_1[k], ax=axes[j, i], palette='Greys_d')
    axes[j, i].set_xlabel(dic_names[y], fontsize=14)
    axes[j, i].set_ylabel(dic_names[x], fontsize=14)

  for k, d in zip([0,1],[0,2]):  # для этих рядов
    hist = (df_2[k].groupby([y])[x]
        .value_counts(normalize=True) #normalising
        .mul(100) #percent
        .rename('percent')
        .reset_index()
        .pipe((sns.barplot,'data'), x=y,y='percent',hue=x, ax=axes[d,i], palette='Greys_d', order=order_bar[k], hue_order = order_hue)) 
    
    #axes lables
    axes[d, i].set_xlabel(dic_names[y], fontsize=14)
    axes[d, i].set_ylabel(dic_names[x], fontsize=14)

    # graph titles
    axes[0, i].set_title(dic_names[x], fontsize=14, pad=20)

    # axes span
    axes[d, i].set_ylim(0,100)
    
    # legend
    handles, labels = axes[d,i].get_legend_handles_labels()
    axes[d,i].legend(title='', handles=handles, labels=labels_[x], loc='upper left')#, bbox_to_anchor=(0, 1.08)) #frameon=False

    # annotation (adding lables above the bars)
    for bar in hist.patches:
      hist.annotate('{}%'.format(bar.get_height().round(1)),
                    (bar.get_x() + bar.get_width() / 2,
                      bar.get_height()), ha='center', va='center',
                    size=11, xytext=(0, 8),
                    textcoords='offset points') 

  axes[0, i].set_title(dic_names[x], fontsize=14)  # column title

#legend
#handles, labels = axes[0,0].get_legend_handles_labels()
#fig.legend(handles, labels, loc=[0.9,0.25], title='Уровень') #create new one

# graph lables
fig.suptitle('Связь напряженности иммунитета и эмфиземы легких у  HIV(+) пациентов',fontsize=18, y=0.92)
#fig.text(0.5, 0.1, 'Поражение легких эмфиземой', ha='center', va='center',fontsize=16 )
#fig.text(0.103, 0.5, 'Процент пациентов, %', ha='center', va='center', rotation='vertical',fontsize=16)

#fig.supxlabel('common_x')
#fig.supylabel('common_y')

# distance between graphs
plt.subplots_adjust(wspace=0.2, hspace=0.15)
#
#fig.tight_layout() 
sns.despine()

"""##### Проверка стат.гипотез"""

from scipy.stats import kruskal

val = ['cd4','s_cd14', 'nadir_cd4', 'cd4_cd8_ratio']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']

for i in val:
  x_1 =  df[df['emphysema_severity']=='0%'][i]
  x_2 =  df[df['emphysema_severity']=='1-10%'][i]
  x_3 =  df[df['emphysema_severity']=='10-25%'][i]
  x_4 =  df[df['emphysema_severity']=='25-50%'][i]
  x_5 =  df[df['emphysema_severity']=='50-75%'][i]

  print(i, kruskal(x_1, x_2, x_3, x_4, x_5, nan_policy='omit'))

"""U-тест (Манна – Уитни) = R-тест (Уилкоксона) (есть ли систематический сдвиг?) (эмфизема сгруппирована по критерию есть-нет)"""

from scipy.stats import mannwhitneyu
from scipy.stats import ks_2samp

df_gr_emph = df.copy()
df_gr_emph['emphysema_severity'] = df_gr_emph['emphysema_severity'].apply(lambda x:'Нет' if x=='0%' else 'Есть')

x_names = ['cd4', 's_cd14', 'nadir_cd4', 'cd4_cd8_ratio', 'hivrna']

for i in x_names:
  x_emf = df_gr_emph[df_gr_emph['emphysema_severity']=='Есть'][i]
  x_no_emf = df_gr_emph[df_gr_emph['emphysema_severity']=='Нет'][i]
  print(dic_names[i])
  print(mannwhitneyu(x=x_emf,y=x_no_emf))
  print(ks_2samp(x_emf,x_no_emf), '\n')

"""критерий хи квадрат для таблицы n*m"""

df_im_gr = df.copy()
df_im_gr['cd4'] = df_im_gr['cd4'].apply(lambda x:'Низкий' if x<500 else ('Нормальный' if (x>=500 and x<1400) else (np.nan if x!=x else 'Высокий')))
df_im_gr['cd4_cd8_ratio'] = df_im_gr['cd4_cd8_ratio'].apply(lambda x:'Низкий' if x<0.4 else ('Нормальный' if (x>=0.4 and x<1.0) else (np.nan if x!=x else 'Высокий')))
df_im_gr['s_cd14'] = df_im_gr['s_cd14'].apply(lambda x:'Низкий' if x<200 else ('Нормальный' if (x>=200 and x<1500) else (np.nan if x!=x else 'Высокий')))
df_im_gr['nadir_cd4'] = df_im_gr['nadir_cd4'].apply(lambda x:'Низкий' if x<190 else ('Нормальный' if (x>=190 and x<400) else (np.nan if x!=x else 'Высокий')))

from scipy.stats import chi2_contingency

val = ['cd4','s_cd14', 'nadir_cd4', 'cd4_cd8_ratio']
emf_st = ['0%','1-10%','10-25%','25-50%', '50-75%']
val_st=['Низкий','Нормальный','Высокий']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df_im_gr[( (df_im_gr['emphysema_severity']==i) & (df_im_gr[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))

  print(dic_names[v], p, '\n')

"""критерий хи квадрат для таблицы 3*2"""

from scipy.stats import chi2_contingency

val = ['cd4','s_cd14', 'nadir_cd4', 'cd4_cd8_ratio']
emf_st = ['Нет', 'Есть']
val_st=['Низкий','Нормальный','Высокий']

l = []
for v in val:
  for i in emf_st:
    for j in val_st:
      l.append(df_cat[( (df_cat['emphysema_severity']==i) & (df_cat[v]==j) )][v].count())

  l_gr = [l[x:x+len(val_st)] for x in range(0, len(l), len(val_st))]  # разбиваем на подлисты по группам (знач в листе упорядочены)

  g, p, dof, expctd = chi2_contingency(np.array(l_gr))

  print(dic_names[v], p, '\n')